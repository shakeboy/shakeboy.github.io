{"meta":{"title":"shakeboy","subtitle":"小猫","description":"","author":"John Doe","url":"http://shakeboy.github.io","root":"/"},"pages":[{"title":"","date":"2020-08-10T11:31:10.628Z","updated":"2020-08-10T11:31:00.926Z","comments":true,"path":"html/home.html","permalink":"http://shakeboy.github.io/html/home.html","excerpt":"","text":""},{"title":"about","date":"2020-08-10T10:32:37.000Z","updated":"2020-08-10T10:32:38.003Z","comments":true,"path":"about/index.html","permalink":"http://shakeboy.github.io/about/index.html","excerpt":"","text":""},{"title":"catagories","date":"2020-08-10T10:33:06.000Z","updated":"2020-08-10T10:33:06.876Z","comments":true,"path":"catagories/index.html","permalink":"http://shakeboy.github.io/catagories/index.html","excerpt":"","text":""},{"title":"links","date":"2020-08-10T10:33:47.000Z","updated":"2020-08-10T10:33:47.377Z","comments":true,"path":"links/index.html","permalink":"http://shakeboy.github.io/links/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-08-10T10:32:49.000Z","updated":"2020-08-10T10:32:49.890Z","comments":true,"path":"tags/index.html","permalink":"http://shakeboy.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"'考研数学'","slug":"考研数学","date":"2020-08-10T09:18:29.000Z","updated":"2020-08-10T09:18:29.883Z","comments":true,"path":"2020/08/10/考研数学/","link":"","permalink":"http://shakeboy.github.io/2020/08/10/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"fornt_development","date":"2020-08-10T08:18:57.274Z","updated":"2020-06-11T23:26:15.168Z","comments":true,"path":"2020/08/10/fornt_development/","link":"","permalink":"http://shakeboy.github.io/2020/08/10/fornt_development/","excerpt":"","text":"一、前端基础软件架构 C/SC/S架构，即Client/Server(客户端/服务器)架构，是一个典型的两层架构。通过将任务合理分配到客户端和服务器，降低了系统的通讯开销，需要安装客户端才可进行管理操作。 客户端包含一个或多个运行在用户计算机上的程序，有两个服务器，一个是数据库服务器，通过数据库连接客户端访问服务器端数据；另一种是套接字服务器，服务器通过套接字程序与客户端通信。 客户端和服务器端的程序不同，用户的程序主要在客户端，服务器端主要提供数据管理、数据共享、数据及系统维护和并发控制等，客户端程序主要完成用户的具体的业务。 开发比较容易，操作简便，但应用程序的升级和客户端程序的维护较为困难。 B/SB/S架构，即Brower/Server(浏览器/服务器)架构。它由逻辑上相互分离的表示层、业务层和数据层构成。表示层向客户提供数据，业务层实施业务和数据规则，数据层定义数据访问标准；三层体系结构中的核心是组件对象模型。 B / S系统统一了客户端，无需特殊安装，拥有Web浏览器即可；它将系统功能实现的核心部分集中到服务器上，简化了系统的开发、维护和使用。可以在服务器上安装数据库，然后浏览器通过mysql等数据库来进行数据交互。 B/S架构和C/S架构的区别 1、建立基础不同 C/S是建立在局域网的基础上的；而，B/S是建立在广域网的基础上的。 2、硬件环境不同 C/S 一般建立在专用的网络上，小范围里的网络环境，局域网之间再通过专门服务器提供连接和数据交换服务。 B/S 建立在广域网之上的，不必有专门的网络硬件环境，例与电话上网，租用设备，信息自己管理。有比C/S更强的适应范围, 一般只要有操作系统和浏览器就行。 3、对安全要求不同 C/S 一般面向相对固定的用户群，对信息安全的控制能力很强。一般高度机密的信息系统采用C/S 结构适宜，可以通过B/S发布部分可公开信息. B/S 建立在广域网之上， 对安全的控制能力相对弱， 面向是不可知的用户群。 4、对程序架构不同 C/S 程序更加注重流程， 可以对权限多层次校验， 对系统运行速度可以较少考虑。 B/S对安全以及访问速度的多重考虑， 建立在需要更加优化的基础之上。 比C/S有更高的要求 B/S结构的程序架构是发展的趋势， 从MS的。Net系列的BizTalk 2000 Exchange 2000等， 全面支持网络的构件搭建的系统。 SUN 和IBM推的JavaBean 构件技术等，使 B/S更加成熟。 例如智赢IPOWER，采用AJAX和数据存储优化技术，相比一般B/S架构软件速度提高30%至99%。 5、软件重用不同 C/S 程序不可避免的考虑整体性， 构件的重用性不如在B/S要求下的构件的重用性好。 B/S对的多重结构，要求构件相对独立的功能， 能够相对较好的重用。 6、系统维护不同 C/S 程序由于整体性， 必须整体考察， 处理出现的问题以及系统升级。 升级难， 可能是再做一个全新的系统 B/S 构件组成，方面构件个别的更换，实现系统的无缝升级。 系统维护开销减到最小；用户从网上自己下载安装就可以实现升级。 7、处理问题不同 C/S 程序可以处理用户面固定， 并且在相同区域， 安全要求高需求， 与操作系统相关。 应该都是相同的系统 B/S 建立在广域网上， 面向不同的用户群， 分散地域， 这是C/S无法作到的；与操作系统平台关系最小。 8、用户接口不同 C/S 多是建立的Window平台上，表现方法有限，对程序员普遍要求较高 B/S 建立在浏览器上， 通过WEB服务或其他公共可识别描述语言可跨平台，使用更灵活。不仅可应用在Window平台上，还可应用于unix/Linux等平台。 9、信息流不同 C/S 程序一般是典型的中央集权的机械式处理， 交互性相对低 B/S 信息流向可变化， B-B B-C B-G等信息、流向的变化， 更象交易中心。 什么是前端前端即网站前台部分，运行在PC端，移动端等浏览器上展现给用户浏览的网页。随着互联网技术的发展，HTML5，CSS3，前端框架的应用，跨平台响应式网页设计能够适应各种屏幕分辨率，完美的动效设计，给用户带来极高的用户体验。 [1] 二、技术探讨全栈 技术并不简单好学 所见即所得 三、三部分技术 W3C标准 https://www.w3cschool.cn/xuexiw3c/ 结构，表现，行为====Html，css,javascript","categories":[],"tags":[]},{"title":"shakeboy","slug":"shakeboy","date":"2020-08-10T05:14:06.000Z","updated":"2020-08-10T05:14:06.389Z","comments":true,"path":"2020/08/10/shakeboy/","link":"","permalink":"http://shakeboy.github.io/2020/08/10/shakeboy/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-08-10T05:08:56.231Z","updated":"2020-08-10T05:08:56.231Z","comments":true,"path":"2020/08/10/hello-world/","link":"","permalink":"http://shakeboy.github.io/2020/08/10/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}